# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  GBIN:  '$(GOPATH)/bin' # Go binaries path
  GOROOT: '/usr/local/go1.13' # Go installation path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

steps:
- script: |
    mkdir -p '$(GBIN)'
    mkdir -p '$(GBIN)/pkg'
    mkdir -p '$(modulePath)'
    shopt -s extglob
    shopt -s dotglob
    mv !(gopath) '$(modulePath)'
    echo '##vso[task.prependpath]$(GBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
  displayName: 'Set up the Go workspace'

- script: |
    go version
    go get -v -t -d ./...
    if [ -f Gopkg.toml ]; then
        curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
        dep ensure
    fi
    
    env GOOS=windows GOARCH=amd64 go install -v .
    env GOOS=linux GOARCH=amd64 go install -v .
    env GOOS=openbsd GOARCH=amd64 go install -v .
    #env GOOS=darwin GOARCH=amd64 go install -v .
    
    mv '$(GBIN)/windows_amd64/fitkit-relay.exe' '$(GBIN)/fitkit-relay-win64.exe'
    mv '$(GBIN)/openbsd_amd64/fitkit-relay' '$(GBIN)/fitkit-relay-bsd64'
    mv '$(GBIN)/fitkit-relay' '$(GBIN)/fitkit-relay-linux64'
    #mv '$(GOBIN)/darwin_amd64/fitkit-relay' '$(GBIN)/fitkit-relay-darwin64'
    ls '$(GBIN)'
  workingDirectory: '$(modulePath)'
  displayName: 'Get dependencies, then build'

- task: GitHubRelease@1
  inputs:
    gitHubConnection: 'janch32 PAT'
    repositoryName: '$(build.repository.name)'
    action: 'create'
    target: '$(Build.SourceVersion)'
    tagSource: 'gitTag'
    tagPattern: '(r|R)elease( |-)v.*'
    assets: '$(GBIN)/*'
    changeLogCompareToRelease: 'lastFullRelease'
    changeLogType: 'commitBased'
